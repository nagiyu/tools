name: Apply Template

on:
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

jobs:
  apply-template:
    runs-on: ubuntu-latest

    steps:
      - name: Install AWS CLI
        run: |
          cd /tmp
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Secrets from AWS SecretsManager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            GitHub
          parse-json-secrets: true

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure git user
        run: |
          git config user.name ${{ env.GITHUB_USERNAME }}
          git config user.email ${{ env.GITHUB_EMAIL }}

      - name: Set branch name
        run: echo "BRANCH_NAME=feature/update-template-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

      - name: Create and checkout branch
        run: git checkout -b ${{ env.BRANCH_NAME }}

      - name: Setup git remote
        run: |
          git remote add template "{{ TEMPLATE_REPOSITORY_URL }}"
          git fetch template

      - name: Merge Template
        run: git merge -X theirs --no-commit template/{{ TEMPLATE_BRANCH }} --allow-unrelated-histories || true

      - name: Reset specific files
        run: |
          git reset -- README.md
          git restore README.md

      - name: Resolve conflicts
        run: |
          if [ -f .git/MERGE_HEAD ]; then
            # 削除競合を削除
            git status --porcelain | grep '^DU ' | awk '{print $2}' | while read file; do
              git rm -f "$file"
            done

            git diff --name-only --diff-filter=U | while read file; do
              # "theirs"側にバージョンがなければ git rm、それ以外は checkout --theirs
              if git show ":3:$file" > /dev/null 2>&1; then
                git checkout --theirs "$file"
                git add "$file"
              else
                git rm -f "$file"
              fi
            done
          fi

      - name: Check for changes
        id: changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes_detected=true" >> $GITHUB_ENV
            echo "Changes detected."
          else
            echo "changes_detected=false" >> $GITHUB_ENV
            echo "No changes detected."
          fi

      - name: Commit and Push
        if: env.changes_detected == 'true'
        run: |
          git commit -m "Update from Template"
          git push origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request
        if: env.changes_detected == 'true'
        run: |
          export GH_TOKEN="${{ env.GITHUB_PERSONAL_ACCESS_TOKEN }}"
          gh pr create \
            --title "[Draft] Update from Template" \
            --body "This is an automated draft PR from template." \
            --base "{{ TARGET_BRANCH }}" \
            --head ${{ env.BRANCH_NAME }} \
            --draft || true